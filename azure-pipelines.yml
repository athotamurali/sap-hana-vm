# Pipeline which deploys SAP HANA VM including filesystem layout and DB installation on RHEL or SUSE
# VM can be added to RSV including hana backup integration script run
# Testing consists of quality checks and HCMT
# 
# Todo:
#  Documentation
#  selective disk backup (exclude HANA Data and LOG from OS Backups)
#  use SSH key and passwords from KeyVault
#  friendly names for disks
#  OS settings from OSS notes
#  execute the HANA Backup
#  Testing (quality checks and HCMT)
#  cleanup everything (unregister HANA and RSV + delete RG)
#  do the same with github actions
#  opotinally setup basic resources (VNET, Subnet, Key vault, RSV, Storage Account, DNS, ...)


parameters:
- name: size
  displayName: HANA VM Size
  type: string
  default: 192_GB
  values:
  - 128_GB-Non-PRD
  - 160_GB-Non-PRD
  - 192_GB
  - 256_GB
  - 512_GB
  - 1.000_GB
  - 1.792_GB
  - 2.000_GB
  - 2.850_GB
  - 3.892_GB
  - 5.700_GB
  - 11.400_GB

- name: os
  displayName: Operating System
  type: string
  default: "SLES 12 SP4"
  values:
  - "RHEL 7"
  - "RHEL 8"
  - "SLES 12 SP4"
  - "SLES 12 SP5"
  - "SLES 15 SP2"

- name: sid
  displayName: HANA System ID
  type: string
  default: "HDB"

- name: nr
  displayName: HANA Instance Number (00-99)
  type: string
  default: "20"

- name: vmname
  displayName: HANA Server Name
  type: string
  default: "hanatest"

- name: location
  displayName: Target Region
  type: string
  default: "West Europe"
  values:
  - "West Europe"
  - "Germany West Central"

- name: subnet
  displayName: Target Subnet
  type: string
  default: "SAPDemoEnvironmentNetwork/subnets/sapdevsubnet"
  values:
  - "SAPDemoEnvironmentNetwork/subnets/sapdevsubnet"
  - "SAPSpokeGWC/subnets/sapdevsubnet"

- name: hanavmdeployment
  displayName: HANA VM Deployment
  type: boolean
  default: true

- name: hanadbinstallation
  displayName: HANA DB Installation
  type: boolean
  default: true

- name: hanabackupsetup
  displayName: HANA Backup Setup
  type: string
  default: "Non-PRD"
  values:
  - "Non-PRD"
  - "PRD"
  - "None"

- name: qualitychecks
  displayName: HANA quality checks
  type: boolean
  default: False

- name: hcmt
  displayName: HANA performance checks
  type: boolean
  default: False

trigger:
  none

pool:
  name: Default

variables:
  backuptype: ${{ parameters.hanabackupsetup }}
  hanadbinst: ${{ parameters.hanadbinstallation }}
  # perform the backup setup only when the DB will be installed
  backuptodo: $[and (ne(variables['backuptype'], 'None'), eq(variables['hanadbinst'], true)) ]

stages:
- stage: Deploy
  jobs:
  - job: Deploy
    steps:
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Pipeline Artifact'
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)'
        artifact: hana

    - task: AzureResourceManagerTemplateDeployment@3
      displayName: 'SAP HANA VM Deployment via ARM'
      inputs:
        deploymentScope: 'Resource Group'
        azureResourceManagerConnection: '$(subscriptionname)'
        subscriptionId: '$(subscription)'
        action: 'Create Or Update Resource Group'
        resourceGroupName: 'HANA-Test-$(Build.BuildId)'
        location: ${{ parameters.location }}
        templateLocation: 'URL of the file'
        csmFileLink: 'https://raw.githubusercontent.com/mimergel/sap-hana-vm/$(Build.SourceBranchName)/azuredeploy.json'
        overrideParameters: '-adminUsername "$(adminuser)" -vmNameInput "${{ parameters.vmname }}" -hanaSystemId "${{ parameters.sid }}" -instancenumber "${{ parameters.nr }}" -hanaSystemSize "${{ parameters.size }}" -osType "${{ parameters.os }}" -adminPasswordOrKey "$(sshkey)" -subnetId "/subscriptions/$(subscription)/resourceGroups/SAPonAzureTrial/providers/Microsoft.Network/virtualNetworks/${{ parameters.subnet }}" -Backup "${{ parameters.hanabackupsetup }}"'
        deploymentMode: 'Complete'
      condition: eq(${{ parameters.hanavmdeployment }}, true)

    - script: ssh-keygen -f "/home/mimergel/.ssh/known_hosts" -R ${{ parameters.vmname }}.$(privatednszone)
      displayName: Remove known_hosts entries from former runs
      failOnStderr: false

    - script: nslookup ${{ parameters.vmname }}.$(privatednszone) ; while [ $? -ne 0 ]; do nslookup ${{ parameters.vmname }}.$(privatednszone) ; sleep 3 ; done
      displayName: Wait until DNS resolves "${{ parameters.vmname }}"
      failOnStderr: false

    - task: Ansible@0
      displayName: 'OS Preparations (Ansible)'
      inputs:
        ansibleInterface: 'agentMachine'
        playbookPathOnAgentMachine: 'os-settings-playbook.yml'
        inventoriesAgentMachine: inlineContent
        inventoryInlineContentAgentMachine: |
          [hana]
          ${{ parameters.vmname }}.$(privatednszone)
        args: -v -e sap_sid=${{ parameters.sid }} -e sap_hostname=${{ parameters.vmname }} -e sap_instancenum=${{ parameters.nr }}
        failOnStdErr: false
      condition: eq(${{ parameters.hanadbinstallation }}, true)

    - task: Ansible@0
      displayName: 'HANA Installation (Ansible)'
      inputs:
        ansibleInterface: 'agentMachine'
        playbookPathOnAgentMachine: 'single_node_playbook.yml'
        inventoriesAgentMachine: inlineContent
        inventoryInlineContentAgentMachine: |
          [hana]
          ${{ parameters.vmname }}.$(privatednszone)
        args: -v -e sap_sid=${{ parameters.sid }} -e sap_hostname=${{ parameters.vmname }} -e sap_instancenum=${{ parameters.nr }}
        failOnStdErr: false
      condition: eq(${{ parameters.hanadbinstallation }}, true)

    - task: Ansible@0
      displayName: 'HANA Backup Preparations (Ansible)'
      inputs:
        ansibleInterface: 'agentMachine'
        playbookPathOnAgentMachine: 'backup_playbook.yml'
        inventoriesAgentMachine: inlineContent
        inventoryInlineContentAgentMachine: |
          [hana]
          ${{ parameters.vmname }}.$(privatednszone)
        args: -v -e sap_sid=${{ parameters.sid }} -e sap_hostname=${{ parameters.vmname }} -e sap_instancenum=${{ parameters.nr }}
        failOnStdErr: false
      condition: eq(variables.backuptodo, true)

    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          # https://docs.microsoft.com/en-us/azure/backup/tutorial-sap-hana-backup-cli 
          # Register the SAP HANA Instance
          az backup container register --resource-group ${env:RSV_RG} \
            --vault-name ${env:RSV} \
            --location ${{ parameters.location }} \
            --workload-type SAPHANA \
            --backup-management-type AzureWorkload \
            --resource-id VMResourceId
          # wie bekomme ich die VMResourceId? Adham fragen :-)
          # Enable Protection
          az backup protection enable-for-azurewl --resource-group saphanaResourceGroup \
            --policy-name saphanaPolicy \
            --protectable-item-name "saphanadatabase;${{ parameters.sid }};${{ parameters.sid }}"  \
            --protectable-item-type SAPHANADatabase \
            --server-name ${{ parameters.vmname }} \
            --workload-type SAPHANA \
            --output table
        errorActionPreference: 'continue'
        showWarnings: true

- stage: Test
  dependsOn: Deploy
  condition: eq(${{ parameters.hcmt }}, true)
  jobs:
  - job: Test
    

- stage: Cleanup
  jobs:
  - job: waitForValidation
    displayName: Wait for cleanup approval
    timeoutInMinutes: 4320 # job times out in 3 days
    steps:
    - task: ManualValidation@0
      timeoutInMinutes: 2880 # task times out in 2 days
      inputs:
        notifyUsers: |
          mimergel@microsoft.com
        instructions: 'Please confirm cleanup with resume or reject'
        onTimeout: 'reject'
  - job: Cleanup


