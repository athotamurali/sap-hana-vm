# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

parameters:
- name: size
  displayName: HANA VM Size
  type: string
  default: 256_GB
  values:
  - 128_GB-Non-PRD
  - 160_GB-Non-PRD
  - 192_GB
  - 256_GB
  - 512_GB
  - 1.000_GB
  - 1.792_GB
  - 2.000_GB
  - 2.850_GB
  - 3.892_GB
  - 5.700_GB
  - 11.400_GB

- name: os
  displayName: Operating System
  type: string
  default: "SLES 12 SP4"
  values:
  - "RHEL 7"
  - "RHEL 8"
  - "SLES 12 SP4"
  - "SLES 12 SP5"
  - "SLES 15 SP2"

- name: sid
  displayName: HANA System ID
  type: string
  default: "HDB"


trigger:
  none

pool:
  # Using my own deployment agents instead of devops agents 
  # vmImage: 'ubuntu-latest'
  name: Default

steps:
- checkout: none
- ${{ if eq(length(parameters.sid), 3) }}:
  - script: echo wrong sid length, must be 3 charachters 
    displayName: sid lenght check

- task: PublishPipelineArtifact@1
  displayName: 'Publish Pipeline Artifact'
  inputs:
    targetPath: '$(System.DefaultWorkingDirectory)'
    artifact: hana

- task: AzureResourceManagerTemplateDeployment@3
  inputs:
    deploymentScope: 'Resource Group'
    azureResourceManagerConnection: '$(subscriptionname)'
    subscriptionId: '$(subscription)'
    action: 'Create Or Update Resource Group'
    resourceGroupName: 'HANA-Test-$(Build.BuildId)'
    location: 'Germany West Central'
    templateLocation: 'URL of the file'
    csmFileLink: 'https://raw.githubusercontent.com/mimergel/sap-hana-vm/main/azuredeploy.json'
    overrideParameters: '-adminUsername "$(adminuser)" -vmNameInput "$(vmname)" -hanaSystemId "$(sid)" -hanaSystemSize ${{ parameters.size }} -osType "$(os)" -adminPasswordOrKey "$(sshkey)" -subnetId "$(subnet)"'
    deploymentMode: 'Complete'
