# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
# 
# Todo:
#  use SSH key and passwords from KeyVault
#  execute the HANA Backup
#  OS settings from OSS notes
#  selective disk backup (exclude HANA DATA and LOG from OS Backups)
#  Testing (quality checks and HCMT)
#  Documentation

parameters:
- name: size
  displayName: HANA VM Size
  type: string
  default: 192_GB
  values:
  - 128_GB-Non-PRD
  - 160_GB-Non-PRD
  - 192_GB
  - 256_GB
  - 512_GB
  - 1.000_GB
  - 1.792_GB
  - 2.000_GB
  - 2.850_GB
  - 3.892_GB
  - 5.700_GB
  - 11.400_GB

- name: os
  displayName: Operating System
  type: string
  default: "SLES 12 SP4"
  values:
  - "RHEL 7"
  - "RHEL 8"
  - "SLES 12 SP4"
  - "SLES 12 SP5"
  - "SLES 15 SP2"

- name: sid
  displayName: HANA System ID
  type: string
  default: "HDB"

- name: nr
  displayName: HANA Instance Number (00-99)
  type: string
  default: "20"

- name: vmname
  displayName: HANA Server Name
  type: string
  default: "hanatest"

- name: location
  displayName: Target Region
  type: string
  default: "West Europe"
  values:
  - "West Europe"
  - "Germany West Central"

- name: subnet
  displayName: Target Subnet
  type: string
  default: "SAPDemoEnvironmentNetwork/subnets/sapdevsubnet"
  values:
  - "SAPDemoEnvironmentNetwork/subnets/sapdevsubnet"
  - "SAPSpokeGWC/subnets/sapdevsubnet"

- name: hanavmdeployment
  displayName: HANA VM Deployment
  type: boolean
  default: true

- name: hanadbinstallation
  displayName: HANA DB Installation
  type: boolean
  default: true

- name: hanabackupsetup
  displayName: HANA Backup Setup
  type: string
  default: "Non-PRD"
  values:
  - "Non-PRD"
  - "PRD"
  - "None"

- name: qualitychecks
  displayName: HANA quality checks
  type: boolean
  default: False

- name: hcmt
  displayName: HANA performance checks
  type: boolean
  default: False

trigger:
  none

pool:
  name: Default

variables:
  # backup: $[  eq( ${{ parameters.hanabackupsetup }}, 'None' ]
  #backup: $[ ${{ if contains(parameters.hanabackupsetup, 'PRD') }} ]
  ${{ if eq( ${{ parameters.hanabackupsetup }}, None ) }}: 
    backup: true

steps:
- task: PublishPipelineArtifact@1
  displayName: 'Publish Pipeline Artifact'
  inputs:
    targetPath: '$(System.DefaultWorkingDirectory)'
    artifact: hana

- task: AzureResourceManagerTemplateDeployment@3
  displayName: 'SAP HANA VM Deployment via ARM'
  inputs:
    deploymentScope: 'Resource Group'
    azureResourceManagerConnection: '$(subscriptionname)'
    subscriptionId: '$(subscription)'
    action: 'Create Or Update Resource Group'
    resourceGroupName: 'HANA-Test-$(Build.BuildId)'
    location: ${{ parameters.location }}
    templateLocation: 'URL of the file'
    csmFileLink: 'https://raw.githubusercontent.com/mimergel/sap-hana-vm/$(Build.SourceBranchName)/azuredeploy.json'
    overrideParameters: '-adminUsername "$(adminuser)" -vmNameInput "${{ parameters.vmname }}" -hanaSystemId "${{ parameters.sid }}" -instancenumber "${{ parameters.nr }}" -hanaSystemSize "${{ parameters.size }}" -osType "${{ parameters.os }}" -adminPasswordOrKey "$(sshkey)" -subnetId "/subscriptions/$(subscription)/resourceGroups/SAPonAzureTrial/providers/Microsoft.Network/virtualNetworks/${{ parameters.subnet }}" -Backup "${{ parameters.hanabackupsetup }}"'
    deploymentMode: 'Complete'
  condition: eq(${{ parameters.hanavmdeployment }}, true)

- script: ssh-keygen -f "/home/mimergel/.ssh/known_hosts" -R ${{ parameters.vmname }}.$(privatednszone)
  displayName: Remove known_hosts entries from former runs
  failOnStderr: false

- script: nslookup ${{ parameters.vmname }}.$(privatednszone) ; while [ $? -ne 0 ]; do nslookup ${{ parameters.vmname }}.$(privatednszone) ; sleep 3 ; done
  displayName: Wait until DNS resolves "${{ parameters.vmname }}"
  failOnStderr: false

- task: Ansible@0
  displayName: 'Ansible Playbook for HANA Installation'
  inputs:
    ansibleInterface: 'agentMachine'
    playbookPathOnAgentMachine: 'single_node_playbook.yml'
    inventoriesAgentMachine: inlineContent
    inventoryInlineContentAgentMachine: |
     [hana]
     ${{ parameters.vmname }}.$(privatednszone)
    args: -v -e sap_sid=${{ parameters.sid }} -e sap_hostname=${{ parameters.vmname }} -e sap_instancenum=${{ parameters.nr }}
    failOnStdErr: false
  condition: eq(${{ parameters.hanadbinstallation }}, true)

- task: Ansible@0
  displayName: 'Ansible Playbook for HANA Backup'
  inputs:
    ansibleInterface: 'agentMachine'
    playbookPathOnAgentMachine: 'backup_playbook.yml'
    inventoriesAgentMachine: inlineContent
    inventoryInlineContentAgentMachine: |
     [hana]
     ${{ parameters.vmname }}.$(privatednszone)
    args: -v -e sap_sid=${{ parameters.sid }} -e sap_hostname=${{ parameters.vmname }} -e sap_instancenum=${{ parameters.nr }}
    failOnStdErr: false
  condition: eq(${{ variables.backup }}, true)